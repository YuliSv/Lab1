import process from"node:process";import{Buffer}from"node:buffer";import path from"node:path";import{fileURLToPath}from"node:url";import childProcess from"node:child_process";import fs from"node:fs/promises";import{constants as fsConstants}from"node:fs";import isWsl from"is-wsl";import defineLazyProperty from"define-lazy-prop";import defaultBrowser from"default-browser";import isInsideContainer from"is-inside-container";const __dirname=path.dirname(fileURLToPath(import.meta.url)),localXdgOpenPath=path.join(__dirname,"xdg-open"),{platform,arch}=process,getWslDrivesMountPoint=(()=>{const t="/mnt/";let a;return async function(){if(a)return a;var e="/etc/wsl.conf";let r=!1;try{await fs.access(e,fsConstants.F_OK),r=!0}catch{}if(!r)return t;e=await fs.readFile(e,{encoding:"utf8"});const o=/(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(e);return o?a=(a=o.groups.mountPoint.trim()).endsWith("/")?a:a+"/":t}})(),pTryEach=async(e,r)=>{let o;for(const t of e)try{return await r(t)}catch(e){o=e}throw o},baseOpen=async t=>{if(t={wait:!1,background:!1,newInstance:!1,allowNonzeroExitCode:!1,...t},Array.isArray(t.app))return pTryEach(t.app,e=>baseOpen({...t,app:e}));let{name:e,arguments:r=[]}=t.app??{};if(r=[...r],Array.isArray(e))return pTryEach(e,e=>baseOpen({...t,app:{name:e,arguments:r}}));if("browser"===e||"browserPrivate"===e){var o={"com.google.chrome":"chrome","google-chrome.desktop":"chrome","org.mozilla.firefox":"firefox","firefox.desktop":"firefox","com.microsoft.msedge":"edge","com.microsoft.edge":"edge","microsoft-edge.desktop":"edge"},a={chrome:"--incognito",firefox:"--private-window",edge:"--inPrivate"},n=await defaultBrowser();if(n.id in o)return o=o[n.id],"browserPrivate"===e&&r.push(a[o]),baseOpen({...t,app:{name:apps[o],arguments:r}});throw new Error(n.name+" is not supported as a default browser")}let i;const s=[],p={};if("darwin"===platform)i="open",t.wait&&s.push("--wait-apps"),t.background&&s.push("--background"),t.newInstance&&s.push("--new"),e&&s.push("-a",e);else if("win32"===platform||isWsl&&!isInsideContainer()&&!e){a=await getWslDrivesMountPoint();i=isWsl?a+"c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe":process.env.SYSTEMROOT+"\\System32\\WindowsPowerShell\\v1.0\\powershell",s.push("-NoProfile","-NonInteractive","-ExecutionPolicy","Bypass","-EncodedCommand"),isWsl||(p.windowsVerbatimArguments=!0);const f=["Start"];t.wait&&f.push("-Wait"),e?(f.push(`"\`"${e}\`""`),t.target&&r.push(t.target)):t.target&&f.push(`"${t.target}"`),0<r.length&&(r=r.map(e=>`"\`"${e}\`""`),f.push("-ArgumentList",r.join(","))),t.target=Buffer.from(f.join(" "),"utf16le").toString("base64")}else{if(e)i=e;else{o=!__dirname||"/"===__dirname;let e=!1;try{await fs.access(localXdgOpenPath,fsConstants.X_OK),e=!0}catch{}n=process.versions.electron??("android"===platform||o||!e);i=n?"xdg-open":localXdgOpenPath}0<r.length&&s.push(...r),t.wait||(p.stdio="ignore",p.detached=!0)}t.target&&s.push(t.target),"darwin"===platform&&0<r.length&&s.push("--args",...r);const c=childProcess.spawn(i,s,p);return t.wait?new Promise((r,o)=>{c.once("error",o),c.once("close",e=>{!t.allowNonzeroExitCode&&0<e?o(new Error("Exited with code "+e)):r(c)})}):(c.unref(),c)},open=(e,r)=>{if("string"!=typeof e)throw new TypeError("Expected a `target`");return baseOpen({...r,target:e})},openApp=(e,r)=>{if("string"!=typeof e)throw new TypeError("Expected a `name`");var{arguments:o=[]}=r??{};if(null==o||Array.isArray(o))return baseOpen({...r,app:{name:e,arguments:o}});throw new TypeError("Expected `appArguments` as Array type")};function detectArchBinary(e){if("string"==typeof e||Array.isArray(e))return e;var{[arch]:e}=e;if(e)return e;throw new Error(arch+" is not supported")}function detectPlatformBinary({[platform]:e},{wsl:r}){if(r&&isWsl)return detectArchBinary(r);if(e)return detectArchBinary(e);throw new Error(platform+" is not supported")}const apps={};defineLazyProperty(apps,"chrome",()=>detectPlatformBinary({darwin:"google chrome",win32:"chrome",linux:["google-chrome","google-chrome-stable","chromium"]},{wsl:{ia32:"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe",x64:["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe","/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"]}})),defineLazyProperty(apps,"firefox",()=>detectPlatformBinary({darwin:"firefox",win32:"C:\\Program Files\\Mozilla Firefox\\firefox.exe",linux:"firefox"},{wsl:"/mnt/c/Program Files/Mozilla Firefox/firefox.exe"})),defineLazyProperty(apps,"edge",()=>detectPlatformBinary({darwin:"microsoft edge",win32:"msedge",linux:["microsoft-edge","microsoft-edge-dev"]},{wsl:"/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"})),defineLazyProperty(apps,"browser",()=>"browser"),defineLazyProperty(apps,"browserPrivate",()=>"browserPrivate");export default open;export{openApp,apps};